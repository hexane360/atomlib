
import textwrap
from io import StringIO

import pytest
import numpy

from .cif import CifReader, CIFDataBlock, CIF
from .. import Atoms, AtomCell
from ..cell import Cell


def test_cif_simple_write_from_atoms():
    atoms = Atoms({
        'x': [1., 2., 3.],
        'y': [4., 5., 6.],
        'z': [7., 8., 9.],
        'elem': [12, 6, 34],
    })
    buf = StringIO()

    cif = CIF((CIFDataBlock.from_atoms(atoms),))
    cif.write(buf)

    assert buf.getvalue() == """\
# generated by atomlib

data_

_audit_creation_method        'Generated by atomlib'

loop_
 _atom_site_type_symbol
 _atom_site_Cartn_x
 _atom_site_Cartn_y
 _atom_site_Cartn_z
 Mg   1.00000000  4.00000000  7.00000000
 C    2.00000000  5.00000000  8.00000000
 Se   3.00000000  6.00000000  9.00000000

"""


def test_cif_complex_write_from_atoms():
    atoms = Atoms({
        'x': [1., 2., 3.],
        'y': [4., 5., 6.],
        'z': [7., 8., 9.],
        'elem': [12, 6, 34],
        'wobble': [0.1, 0.2, 0.3],
        'frac_occupancy': [1.0, 0.1, 0.2],
        'label': ['mgsite01', 'csite001', 'site 3'],
    })
    buf = StringIO()

    cif = CIF((CIFDataBlock.from_atoms(atoms),))
    cif.write(buf)

    assert buf.getvalue() == """\
# generated by atomlib

data_

_audit_creation_method        'Generated by atomlib'

loop_
 _atom_site_type_symbol
 _atom_site_label
 _atom_site_occupancy
 _atom_site_Cartn_x
 _atom_site_Cartn_y
 _atom_site_Cartn_z
 _atom_site_U_iso_or_equiv
 Mg   mgsite01  1.00000000  1.00000000  4.00000000  7.00000000  0.10000000
 C    csite001  0.10000000  2.00000000  5.00000000  8.00000000  0.20000000
 Se   'site 3'  0.20000000  3.00000000  6.00000000  9.00000000  0.30000000

"""


@pytest.fixture(scope='module')
def complex_atomcell() -> AtomCell:
    cell = Cell.from_unit_cell([1., 2., 3.], numpy.array([90., 90., 120.]) * numpy.pi/180.).repeat((2, 3, 4))
    # box size 2., 6., 12.

    return AtomCell(Atoms({
        'x': [0.5, 2., 0.0],  # frac: [0.25, 1.0, 0.0]
        'y': [0., 3., 6.],  # frac: [0.0, 0.5, 1.0]
        'z': [4.8, 6., 12.], # frac: [0.4, 0.5, 1.0]
        'elem': [12, 6, 34],
        'wobble': [0.1, 0.2, 0.3],
        'frac_occupancy': [1.0, 0.1, 0.2],
        'label': ['mgsite01', 'csite001', 'site 3'],
    }), cell, frame='cell')


def test_cif_write_from_atomcell(complex_atomcell: AtomCell):
    buf = StringIO()

    cif = CIF((CIFDataBlock.from_atomcell(complex_atomcell),))
    cif.write(buf)

    assert buf.getvalue() == """\
# generated by atomlib

data_

_audit_creation_method        'Generated by atomlib'

loop_
 _space_group_symop_id
 _space_group_symop_operation_xyz
 1  x,y,z

_cell_length_a                2.00000000
_cell_length_b                6.00000000
_cell_length_c                12.00000000
_cell_angle_alpha             90.00000000
_cell_angle_beta              90.00000000
_cell_angle_gamma             120.00000000
_cell_volume                  124.70765814

loop_
 _atom_site_type_symbol
 _atom_site_label
 _atom_site_occupancy
 _atom_site_fract_x
 _atom_site_fract_y
 _atom_site_fract_z
 _atom_site_U_iso_or_equiv
 Mg   mgsite01  1.00000000  0.25000000  0.00000000  0.40000000  0.10000000
 C    csite001  0.10000000  1.00000000  0.50000000  0.50000000  0.20000000
 Se   'site 3'  0.20000000  0.00000000  1.00000000  1.00000000  0.30000000

"""


def test_cif_comments():
    s = """
    1 tis a sentence

      # 4 comments
    # 5 and comments
      6
    """

    r = CifReader(StringIO(s))
    assert r.next_word() == "1"
    assert r.after_eol() == False
    r.next_word(); r.next_word(); r.next_word()
    assert r.after_eol() == True
    assert r.next_word() == "6"
    assert r.line == 6


def test_cif_parse():
    s = textwrap.dedent("""
    data_dataname
    _text_block
    ;
    This is a text block; which ' can ; contain " many characters
    _ - loop_ data_data
    ;
    _quoted_text 'this is a quote'd text" block
    which extends over multiple lines'

    _bare_text bar'etextwith"quotes
    _int 2048
    _float 0.
    _float2 3.5e+5
    _float3 .5(3)
    data_data2
    _tag1
    ; foo
    bar
    ;
    """)

    reader = CifReader(StringIO(s))
    [c1, c2] = reader.parse()
    [d1, d2] = [c1.data_dict, c2.data_dict]

    assert c1.name == 'dataname'
    assert d1['text_block'] == textwrap.dedent("""\
    This is a text block; which ' can ; contain " many characters
    _ - loop_ data_data""")
    assert d1['quoted_text'] == 'this is a quote\'d text" block\n' \
    'which extends over multiple lines'
    assert d1['bare_text'] == "bar'etextwith\"quotes"
    assert d1['int'] == 2048
    assert d1['float'] == 0.
    assert d1['float2'] == 3.5e+5
    assert d1['float3'] == .5

    assert c2.name == 'data2'
    assert d2['tag1'] == 'foo\nbar'