
import re
from io import StringIO

import pytest

from .lmp import LMP, LMPSection
from .. import AtomCell, Atoms, Cell
from ..transform import AffineTransform3D


def test_lmp_from_atoms():
    atoms = AtomCell.from_unit_cell(Atoms({
        'x': [0., 5., 8.],
        'y': [2., 5., 9.],
        'z': [2., 5., 9.],
        'v_x': [1., -1., 2.],
        'v_y': [2., 4., -2.],
        'v_z': [2., 2., -1.],
        'elem': [5, 1, 18],
    }), cell_size=[4., 6., 10.])

    lmp = LMP.from_atoms(atoms)

    assert lmp.comment is not None
    assert lmp.comment.startswith("# Generated by atomlib")

    assert lmp.headers == {
        'atoms': 3,
        'atom types': 3,
        'xlo xhi': (0., 4.),
        'ylo yhi': (0., 6.),
        'zlo zhi': (0., 10.),
        'xy xz yz': (0., 0., 0.),
    }

    assert lmp.sections == (
        LMPSection('Atom Type Labels', (
"        1    H\n",
"        2    B\n",
"        3   Ar\n",
        )),
        LMPSection('Masses', (
"        1      1.0080000  # H\n",
"        2     10.8100004  # B\n",
"        3     39.9500008  # Ar\n",
        )),
        LMPSection('Atoms', (
"        1    2      0.0000000      2.0000000      2.0000000\n",
"        2    1      5.0000000      5.0000000      5.0000000\n",
"        3    3      8.0000000      9.0000000      9.0000000\n",
        ), style='atomic'),
        LMPSection('Velocities', (
"        1      1.0000000      2.0000000      2.0000000\n",
"        2     -1.0000000      4.0000000      2.0000000\n",
"        3      2.0000000     -2.0000000     -1.0000000\n",
        ))
    )


def test_write_lmp():
    lmp = LMP(
        "my comment",
        {
            'atoms': 3,
            'impropers': 1,
        },
        (
            LMPSection('Atoms', (
" 1 1 1 0 0\n",
" 2 1 0 1 0\n",
" 3 1 0 0 1\n",
            ), 'atomic'),
            LMPSection('Impropers', (
"2 20 0.0548311\n",
            ))
        )
    )

    buf = StringIO()
    lmp.write(buf)

    assert buf.getvalue() == """my comment

        3 atoms
        1 impropers

Atoms  # atomic

 1 1 1 0 0
 2 1 0 1 0
 3 1 0 0 1

Impropers

2 20 0.0548311
"""


def test_lmp_get_atoms_typemap():
    f = StringIO("""
3 atoms
3 atom types

Atoms
   1 1 1.0 0.0 0.0
   2 2 0.0 1.0 0.0
   3 3 0.0 0.0 1.0
""")
    lmp = LMP.from_file(f)
    atoms = lmp.get_atoms({1: 'Al+', 2: 7, 3: 8})

    atoms.assert_equal(AtomCell({
        'i': [1, 2, 3],
        'type': [1, 2, 3],
        'x': [1., 0., 0.],
        'y': [0., 1., 0.],
        'z': [0., 0., 1.],
        'elem': [13, 7, 8],
        'symbol': ['Al+', 'N', 'O'],
    }, Cell(affine=AffineTransform3D().translate(-0.5, -0.5, -0.5), cell_size=[1., 1., 1.]), frame='local'))


def test_lmp_get_atoms_inferred():
    f = StringIO("""
3 atoms
3 atom types

Atom Type Labels
   1  Al+
   2  N
   3  O

Atoms
   1 Al+ 1.0 0.0 0.0
   2 N 0.0 1.0 0.0
   3 3 0.0 0.0 1.0
""")
    lmp = LMP.from_file(f)
    atoms = lmp.get_atoms()

    atoms.assert_equal(AtomCell({
        'i': [1, 2, 3],
        'type': [1, 2, 3],
        'x': [1., 0., 0.],
        'y': [0., 1., 0.],
        'z': [0., 0., 1.],
        'elem': [13, 7, 8],
        'symbol': ['Al+', 'N', 'O'],
    }, Cell(affine=AffineTransform3D().translate(-0.5, -0.5, -0.5), cell_size=[1., 1., 1.]), frame='local'))


def test_lmp_get_atoms_missing_type_map():
    f = StringIO("""This should fail because we can't infer elements from atom types
3 atoms
1 atom types

Atoms

  1 1 0.0 0.0 0.0
  2 1 0.0 0.0 0.0
  3 1 0.0 0.0 0.0
""")

    lmp = LMP.from_file(f)

    with pytest.raises(ValueError, match=re.escape(
        "Failed to auto-detect elements from type labels. Please pass 'type_map' explicitly"
    )):
        lmp.get_atoms()


def test_lmp_get_atoms_invalid_type_map():
    f = StringIO("""
3 atoms
1 atom types

Atoms

  1 1 0.0 0.0 0.0
  2 1 0.0 0.0 0.0
  3 1 0.0 0.0 0.0
""")

    lmp = LMP.from_file(f)

    with pytest.raises(ValueError, match=re.escape(
        "Invalid type map"
    )):
        lmp.get_atoms({1: "El"})


def test_lmp_get_atoms_missing_type_in_map():
    f = StringIO("""
4 atoms
4 atom types

Atoms

  1 1 0.0 0.0 0.0
  2 2 0.0 0.0 0.0
  3 3 0.0 0.0 0.0
  4 4 0.0 0.0 0.0
""")

    lmp = LMP.from_file(f)

    with pytest.raises(ValueError, match=re.escape(
        "Missing type_map specification for atom type(s): 3, 4"
    )):
        print(lmp.get_atoms({1: "Al", 2: "N"}))



def test_lmp_get_atoms_unreadable_labels():
    f = StringIO("""
4 atoms
2 atom types

Atom Type Labels

1  Au
2  El

Atoms  # atomic

  1 1 0.0 0.0 0.0
  2 1 0.0 0.0 0.0
  3 2 0.0 0.0 0.0
  4 2 0.0 0.0 0.0
""")

    lmp = LMP.from_file(f)

    with pytest.raises(ValueError, match=re.escape(
        "Failed to auto-detect elements from type labels. Please pass 'type_map' explicitly"
    )):
        print(lmp.get_atoms())


def test_lmp_get_atoms_missing_label():
    f = StringIO("""
4 atoms
3 atom types

Atom Type Labels
   1  Al+
   2  N
   3  O

Atoms
   1 Al+ 1.0 0.0 0.0
   2 Fail 0.0 1.0 0.0
   3 3 0.0 0.0 1.0
   4 2 0.0 0.0 1.0
""")

    lmp = LMP.from_file(f)

    with pytest.raises(ValueError, match=re.escape(
        'While parsing section Atoms: Unknown atom label or invalid atom type'
    )):
        print(lmp.get_atoms())


def test_lmp_get_atoms_wrong_style():
    f = StringIO("""
4 atoms
2 atom types

Atoms  # charge

  1 1  1.0 0.0 0.0 0.0
  2 1  1.0 0.0 0.0 0.0
  3 2 -1.0 0.0 0.0 0.0
  4 2 -1.0 0.0 0.0 0.0
""")

    lmp = LMP.from_file(f)

    with pytest.raises(ValueError, match=re.escape(
        "Only 'atomic' atom_style is supported, instead got 'charge'"
    )):
        print(lmp.get_atoms({1: "Na", 2: "Cl"}))


def test_lmp_failed_join_velocity():
    f = StringIO("""
4 atoms
2 atom types

Atom Type Labels
   1  Al
   2  N

Atoms  # atomic

  1 1  1.0 0.0 0.0 0.0
  2 1  1.0 0.0 0.0 0.0
  3 2 -1.0 0.0 0.0 0.0
  4 2 -1.0 0.0 0.0 0.0

Velocities

  2 0.0 0.0 0.0
  3 0.0 0.0 0.0
  5 0.0 0.0 0.0
  6 0.0 0.0 0.0
""")

    lmp = LMP.from_file(f)

    with pytest.raises(ValueError, match=re.escape(
        "Missing velocities for 2/4 atoms"
    )):
        print(lmp.get_atoms())