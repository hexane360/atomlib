
import numpy

from ..atoms import HasAtoms
from ..atomcell import HasAtomCell
from ..util import open_file, FileOrPath, localtime
from ..transform import AffineTransform3D


def write_lmp(atoms: HasAtoms, f: FileOrPath):
    if isinstance(atoms, HasAtomCell):
        # we're basically converting everything to the ortho frame, but including the affine shift

        # transform affine shift into ortho frame
        origin = atoms.get_transform('ortho', 'local').to_linear().round_near_zero() \
            .transform(atoms.get_cell().affine.translation())

        # get the orthogonalization transform only, without affine
        ortho = atoms.get_transform('ortho', 'cell_box').to_linear().round_near_zero().inner

        # get atoms in ortho frame, and then add the affine shift
        frame = atoms.get_atoms('ortho').transform_atoms(AffineTransform3D.translate(origin)) \
            .round_near_zero().with_type()
    else:
        bbox = atoms.bbox_atoms()
        ortho = numpy.diag(bbox.size)
        origin = bbox.min

        frame = atoms.get_atoms('local').with_type()

    types = frame.unique(subset='type')
    types = types.with_mass().sort('type')

    with open_file(f, 'w') as f:
        def p(s: object):
            print(s, file=f)

        now = localtime()
        p(f"# Generated by atomlib on {now.isoformat(' ', 'seconds')}\n")

        p(f" {len(frame):8} atoms")
        p(f" {len(types):8} atom types\n")

        for (s, low, diff) in zip(('x', 'y', 'z'), origin, ortho.diagonal()):
            p(f" {low:16.7f} {low + diff:14.7f} {s}lo {s}hi")

        p(f"\n {ortho[0, 1]:16.7f} {ortho[0, 2]:14.7f} {ortho[1, 2]:14.7f} xy xz yz")

        p(f"\nMasses\n")
        for (ty, sym, mass) in types.select(('type', 'symbol', 'mass')).rows():
            p(f" {ty:8} {mass:14.7f}  # {sym}")

        p(f"\nAtoms  # atomic\n")
        for (i, (ty, (x, y, z))) in enumerate(frame.select(('type', 'coords')).rows()):
            p(f" {i+1:8} {ty:4} {x:14.7f} {y:14.7f} {z:14.7f}")

        if (velocities := frame.velocities()) is not None:
            p(f"\nVelocities\n")
            for (i, (v_x, v_y, v_z)) in enumerate(velocities):
                p(f" {i+1:8} {v_x:14.7f} {v_y:14.7f} {v_z:14.7f}")
